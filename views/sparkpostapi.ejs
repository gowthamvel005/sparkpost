<!DOCTYPE html>
<html>
  <head>
    <script src="https://unpkg.com/react@16/umd/react.production.min.js"></script>
    <script src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/babel-standalone@6.15.0/babel.min.js"></script>
    <script src="https://unpkg.com/react-bootstrap@next/dist/react-bootstrap.min.js"></script>

    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.0/axios.min.js"
      integrity="sha512-DZqqY3PiOvTP9HkjIWgjO6ouCbq+dxqWoJZ/Q+zPYNHmlnI2dQnbJ5bxAHpAMw+LXRm4D72EIRXzvcHQtE8/VQ=="
      crossorigin="anonymous"
    ></script>

    <script
      src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
      integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"
      integrity="sha384-cs/chFZiN24E4KMATLdqdvsezGxaGsi4hLGOzlXwp5UZB1LY//20VyM2taTB4QvJ"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"
      integrity="sha384-uefMccjFJAIv6A+rW+L4AHf99KvxDjWSu1z9VI8SKNVmz4sk7buKt/6v9KI65qnm"
      crossorigin="anonymous"
    ></script>

    <link
      rel="stylesheet"
      href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css"
      integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk"
      crossorigin="anonymous"
    />
    <!-- Icon -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"
    />
    <link rel="stylesheet" type="text/css" href="/css/sparkpost.css" />
  </head>
  <body style={{ "overflow-y": "auto" }}>
    <div class="row">
      <div class="col-md-2"></div>
      <div class="col-md-8" id="mydiv"></div>
      <div class="col-md-2"></div>
    </div>

    <script type="text/babel">
      function AddLogorow(abcd, second) {
        return (
          <div class="e1logorowpadding epaddingbottom12">
            <div>
              <img src="/images/sparkpost-logo.png" width="120" height="31" />
            </div>
          </div>
        );
      }

      function AddBackButton(page, btnclick, btnclass) {
        if (page > 1) {
          return (
            <button onClick={btnclick} class={btnclass}>
              Back
            </button>
          );
        } else {
          return "";
        }
      }

      function AddButtonBlock(
        cancelclick,
        nextclick,
        nextbtntext,
        btnclass,
        backclick,
        pageno
      ) {
        return (
          <div class="e1container">
            <div class="row">
              <div class="col-md-2 pull-left">
                <button
                  onClick={cancelclick}
                  class="btn btn-link e1cancelbuton float-left"
                >
                  Cancel
                </button>
              </div>
              <div class="col-md-7" id="mydiv"></div>
              <div class="col-md-3">
                <button onClick={nextclick} class={btnclass}>
                  {nextbtntext}
                </button>
                {AddBackButton(pageno, backclick, btnclass)}
              </div>
            </div>
          </div>
        );
      }

      function getmarginWidth(step) {
        let margin = "56%";
        if (step == 1) {
          margin = "42%";
        } else if (step == 2) {
          margin = "44%";
        } else if (step == 3) {
          margin = "43%";
        }
        return margin;
      }

      function GetIcon() {
        return <i class="fa fa-check-circle" aria-hidden="true"></i>;
      }

      function getDigitIcon() {
        return <span class="badge">2</span>;
      }
      function AsignDigitIcon(stepno, Status) {
        const mystyle = {
          fontSize: 15,
          fontWeight: "700",
          strokeWidth: 0,
        };
        if (Status == false) {
          return (
            <svg width="100" height="100">
              <circle cx="30" cy="24" r="6" stroke-width="4" fill="#fff" />
              <text
                x="30%"
                y="26%"
                dominant-baseline="middle"
                text-anchor="middle"
                style={mystyle}
                class="polygonStyleUnselected"
              >
                {stepno}
              </text>
            </svg>
          );
        } else {
          return "";
        }
      }

      function getWidthSize(stepno) {
        if (stepno == 1) {
          return "240";
        } else if (stepno == 2) {
          return "300";
        } else if (stepno == 3) {
          return "200";
        }
      }

      function getSvgSize(stepno) {
        if (stepno == 1) {
          return "202.5,25 182.5,51 0,51 0,25 0,0 182.5,0";
          //return "240,25 220,51 37.5,51 37.5,25 37.5,0 220,0";
          //return "240,25 220,51 18.5,51 37.5,25 18.5,0 220,0";
        } else if (stepno == 2) {
          return "265.5,25 242.5,51 0,51 19,25 0,0 242.5,0";
          //return "220,25 200,51 18.5,51 37.5,25 18.5,0 200,0";
        } else if (stepno == 3) {
          return "185.5,25 162.5,51 0,51 19,25 0,0 162.5,0";
          //return "200,25 180,51 18.5,51 37.5,25 18.5,0 180,0";
        }
      }

      function GetIconSize(stepno) {
        if (stepno == 1) {
          return "20";
        } else if (stepno == 2) {
          return "34";
        } else if (stepno == 3) {
          return "34";
        }
      }

      function SetSVGCLass(Status) {
        let SelectionClass = "";
        if (Status == "Previous") {
          SelectionClass = "polygonStyleCompleted";
        } else if (Status == "Current") {
          SelectionClass = "polygonStyleStatndby";
        } else if (Status == "Next") {
          SelectionClass = "polygonStyleUnselected";
        }
        return SelectionClass;
      }

      function SetStyleForWizardText(Status) {
        if (Status == "Previous") {
          const TextStyle = {
            fill: "#fff",
          };
          return TextStyle;
        } else if (Status == "Current") {
          const TextStyle = {
            fill: "#fff",
          };
          return TextStyle;
        } else if (Status == "Next") {
          const TextStyle = {
            fill: "black",
          };
          return TextStyle;
        }
      }

      function DigitStyle(Status) {
        if (Status == "Previous") {
          const mystyle = {
            // fontSize:15,
            fontWeight: "700",
            strokeWidth: 0,
          };
          return mystyle;
        } else if (Status == "Current") {
          const mystyle = {
            // fontSize:15,
            fill: "#1E67B7",
            fontWeight: "700",
            strokeWidth: 0,
          };
          return mystyle;
        } else if (Status == "Next") {
          const mystyle = {
            // fontSize:15,
            // fill: "#black",
            fontWeight: "700",
            strokeWidth: 0,
          };
          return mystyle;
        }
      }

      function GetWizardStep(labelname, stepno, Status, onClickHandler) {
        let marginLeft = getmarginWidth(stepno);
        let SelectionClass = SetSVGCLass(Status); //(Status==true)?"polygonStyleSelected":"polygonStyleUnselected";

        let pointerClass = Status == "Previous" ? "clsLink" : "clsUnlink";
        let svgPoints = getSvgSize(stepno);
        let TotalWidth = getWidthSize(stepno);
        let RoundedIconWidth = GetIconSize(stepno);
        let RoundedIconWidthForText = RoundedIconWidth + "%";
        let className = "svgStyles " + "Div" + stepno + " " + pointerClass;
        const mystyle = DigitStyle(Status);

        // {
        //   // fontSize:15,
        //   fontWeight: "700",
        //   strokeWidth: 0,
        // };

        const TextStyle = SetStyleForWizardText(Status);

        if (Status == "Previous") {
          return (
            <svg
              name={stepno}
              height="75"
              width={TotalWidth}
              class={className}
              onClick={onClickHandler}
            >
              <polygon points={svgPoints} class={SelectionClass} />
              <svg width="100" height="100">
                <text
                  x={RoundedIconWidthForText}
                  y="26%"
                  dominant-baseline="middle"
                  text-anchor="middle"
                  class="iconStyle"
                >
                  {" "}
                  &#xf058;{" "}
                </text>
              </svg>

              <text
                x={marginLeft}
                y="34%"
                dominant-baseline="middle"
                text-anchor="middle"
                style={TextStyle}
                class="wizardTextStyle"
              >
                {" "}
                {labelname}
              </text>
            </svg>
          );
        } else {
          return (
            <svg
              name={stepno}
              height="75"
              width={TotalWidth}
              class={className}
              onClick={onClickHandler}
            >
              <polygon points={svgPoints} class={SelectionClass} />
              <svg width="100" height="100">
                <circle
                  cx={RoundedIconWidth}
                  cy="24"
                  r="8"
                  stroke-width="4"
                  style={TextStyle}
                />
                <text
                  x={RoundedIconWidthForText}
                  y="26%"
                  dominant-baseline="middle"
                  text-anchor="middle"
                  style={mystyle}
                  class="polygonStyleUnselected"
                >
                  {stepno}
                </text>
              </svg>
              <g>
                <text class="badge">CLICK ME</text>
              </g>
              <text
                x={marginLeft}
                y="34%"
                dominant-baseline="middle"
                text-anchor="middle"
                style={TextStyle}
                class="wizardTextStyle"
              >
                {" "}
                {labelname}
              </text>
            </svg>
          );
        }
      }

      function GetWizardText(step, onchangeHandler) {
        if (step == 1) {
          return (
            <div class="row marginZero">
              <div
                class="col-sm-4 Div1 txtlabel txtIncompleted clsUnlink"
                onClick={onchangeHandler}
              >
                <span class="wrdtext">SSO Verification</span>
              </div>
              <div
                class="col-sm-4 Div2 txtlabel txtIncompleted clsUnlink"
                onClick={onchangeHandler}
              >
                <span class="wrdtext">Inbox Tracker Configuration</span>
              </div>
              <div
                class="col-sm-4 Div3 txtlabel txtIncompleted clsUnlink"
                onClick={onchangeHandler}
              >
                <span class="wrdtext">Review Setup</span>
              </div>
            </div>
          );
        } else if (step == 2) {
          return (
            <div class="row marginZero">
              <div
                class="col-sm-4 Div1 txtlabel txtCompleted clsLink"
                onClick={onchangeHandler}
              >
                <span class="wrdtext">SSO Verification</span>
              </div>
              <div
                class="col-sm-4 Div2 txtlabel txtIncompleted clsUnlink"
                onClick={onchangeHandler}
              >
                <span class="wrdtext">Inbox Tracker Configuration</span>
              </div>
              <div
                class="col-sm-4 Div3 txtlabel txtIncompleted clsUnlink"
                onClick={onchangeHandler}
              >
                <span class="wrdtext">Review Setup</span>
              </div>
            </div>
          );
        } else if (step == 3) {
          return (
            <div class="row marginZero">
              <div
                class="col-sm-4 Div1 txtlabel txtCompleted clsLink"
                onClick={onchangeHandler}
              >
                <span class="wrdtext">SSO Verification</span>
              </div>
              <div
                class="col-sm-4 Div2 txtlabel txtCompleted clsLink"
                onClick={onchangeHandler}
              >
                <span class="wrdtext">Inbox Tracker Configuration</span>
              </div>
              <div
                class="col-sm-4 Div3 txtlabel txtIncompleted clsUnlink"
                onClick={onchangeHandler}
              >
                <span class="wrdtext">Review Setup</span>
              </div>
            </div>
          );
        }
      }

      function GetWizardBackground(step, onchangeHandler) {
        if (step == 1) {
          return (
            <div class="row marginZero">
              <div
                class="col-sm-4 Div1 Completed clsUnlink"
                onClick={onchangeHandler}
              ></div>
              <div
                class="col-sm-4 Div2 Incompleted clsUnlink"
                onClick={onchangeHandler}
              ></div>
              <div
                class="col-sm-4 Div3 Incompleted clsUnlink"
                onClick={onchangeHandler}
              ></div>
            </div>
          );
        } else if (step == 2) {
          return (
            <div class="row marginZero">
              <div
                class="col-sm-4 Div1 Completed clsLink"
                onClick={onchangeHandler}
              ></div>
              <div
                class="col-sm-4 Div2 Completed clsUnlink"
                onClick={onchangeHandler}
              ></div>
              <div
                class="col-sm-4 Div3 Incompleted clsUnlink"
                onClick={onchangeHandler}
              ></div>
            </div>
          );
        } else if (step == 3) {
          return (
            <div class="row marginZero">
              <div
                class="col-sm-4 Div1 Completed clsLink"
                onClick={onchangeHandler}
              ></div>
              <div
                class="col-sm-4 Div2 Completed clsLink"
                onClick={onchangeHandler}
              ></div>
              <div
                class="col-sm-4 Div3 Completed clsUnlink"
                onClick={onchangeHandler}
              ></div>
            </div>
          );
        }
      }

      function wizardNavigationNew(step, onchangeHandler) {
        //onclick={onClickHandler(stepno)}

        return (
          <div class="e1logorowpadding epaddingbottom12">
            {GetWizardText(step, onchangeHandler)}
            {GetWizardBackground(step, onchangeHandler)}
          </div>
        );
      }
      // if(step==1){
      //   return (
      //   <div class="wizard">
      //     {GetWizardStep("ORG. PREFERENCES", 1, "Current", onchangeHandler)}
      //     {GetWizardStep("INBOX TRACKER CONFIG", 2, "Next", onchangeHandler)}
      //     {GetWizardStep("SUMMARY", 3, "Next", onchangeHandler)}
      //   </div>
      //   );
      // } else if(step==2){
      //   return (
      //   <div class="wizard">

      //     {GetWizardStep("ORG. PREFERENCES", 1, "Previous", onchangeHandler)}
      //     {GetWizardStep("INBOX TRACKER CONFIG", 2, "Current", onchangeHandler)}
      //     {GetWizardStep("SUMMARY", 3, "Next", onchangeHandler)}
      //   </div>
      //   );
      // }else if(step==3){
      //   return (
      //   <div class="wizard">

      //     {GetWizardStep("ORG. PREFERENCES", 1, "Previous", onchangeHandler)}
      //     {GetWizardStep("INBOX TRACKER CONFIG", 2, "Previous", onchangeHandler)}
      //     {GetWizardStep("SUMMARY", 3, "Current", onchangeHandler)}
      //   </div>
      //   );
      // }

      //}

      function valicateFirstPage(name, groupname, PageStatus) {
        if (
          name != "" &&
          name != " " &&
          name != null &&
          groupname != "" &&
          groupname != " " &&
          groupname != null
        ) {
          return true;
        } else {
          return false;
        }
      }

      function ValidateAndNotify(name, groupname, PageStatus) {
        var DivClass = "";
        var IconClass = "";
        var Message = "";

        if (PageStatus == 1) {
          //Validation Success
          DivClass = "alert alert-success divAlert";
          IconClass = "fa fa-check-circle-o";
          Message = "Sparkpost Access Verified";
        } else if (PageStatus == 2) {
          //Validation Failed
          DivClass = "alert alert-danger divAlert";
          IconClass = "fa fa-times-circle-o";
          Message =
            "Something went wrong, Please contact your SparkPost Support Team";
        } else {
          return "";
        }

        return (
          <div class={DivClass}>
            <span class="divIcon">
              <i class={IconClass} aria-hidden="true"></i>
            </span>
            <span class="divDesc">
              <span>{Message}</span>
            </span>
          </div>
        );

        // debugger;
        // if(valicateFirstPage(name, groupname)){
        //   return (
        //     <div class="alert alert-success divAlert">
        //       <div class="divIcon dispInline">
        //         <i class="fa fa-check-circle-o" aria-hidden="true"></i>
        //       </div>
        //       <div class="divDesc dispInline">
        //         <span>Sparkpost Access Verified</span>
        //       </div>
        //     </div>
        //   )
        // } else{
        //   return (
        //     <div class="alert alert-danger divAlert">
        //       <div class="divIcon dispInline">
        //         <i class="fa fa-times-circle-o" aria-hidden="true"></i>
        //       </div>
        //       <div class="divDesc dispInline">
        //         <span>Something went wrong, Please contact your SparkPost Support Team</span>
        //       </div>
        //     </div>
        //   )
        // }
      }

      function GetThresholdsMedalSection(
        inboxrange,
        changehandler,
        inboxrangelabel,
        modelname,
        headername,

        rulesMdlName,
        rulesMdlSimulatedEng,
        rulesMdlPercentList,
        rulesMdlCampaignMinVal,
        rulesMdlFilterByRegion,

        rulesMdlNorthAmericaCanada,
        rulesMdlNorthAmericaUS,
        AsiaPacific,

        myBtnClickHandler,
        formName,
        OpenModal,

        engagementrange,
        engagementrangelabel,
        SPFrange,
        SPFrangelabel,
        DKIMrange,
        DKIMrangelabel,

        modalContentHeading,
        domainName
      ) {
        //var Numinboxrange=parseInt(inboxrange);

        var ForFifty = Math.round(parseInt(inboxrange));
        var engagementForFifty = Math.round(parseInt(engagementrange));
        var SPFForFifty = Math.round(parseInt(SPFrange));
        var DKIMForFifty = Math.round(parseInt(DKIMrange));
        var thisdata = this;

        if (modelname == "1") {
          return (
            <div>
              <div className="modal-header">
                <label class="e1labelheaderPage1">
                  <img
                    class="thresbtns2 imageBackgroud"
                    src="/images/threshold.png"
                  />
                  <span>{headername}</span>{" "}
                </label>
              </div>
              <div class="modal-body">
                <div class="row">
                  <div class="col-md-1"></div>
                  <div class="col-md-11 float-left">
                    <label class="thresbtnsmall">
                      <img class="thresbtns2" src="/images/inbox_idle.png" style={{ "width": "45px","height": "40px"}}/>{" "}
                      {modalContentHeading} inbox Rate %
                    </label>
                  </div>
                </div>
                <div class="row">
                  <div class="col-md-1"></div>
                  <div class="col-md-9 float-left">
                    <label class="threspercentage">50%</label>
                  </div>
                  <div class="col-md-1">
                    <label class="e1labelheaderPage4 float-left" style={{ "margin-left": "15px"}}>100%</label>
                  </div>
                  <div class="col-md-1"></div>
                </div>

                <div class="row">
                  <div class="col-md-1"></div>

                  <div class="col-md-10">
                    <input
                      type="range"
                      data-toggle="tooltip"
                      data-placement="right"
                      title={inboxrange}
                      name="inboxrange"
                      min="50"
                      max="100"
                      value={inboxrange}
                      onChange={changehandler}
                      class="slider"
                      id="myRange"
                    />
                    <div style={{ "margin-left": inboxrangelabel }}>
                      {ForFifty}%
                    </div>
                  </div>
                  <div class="col-md-1"></div>
                </div>
              </div>
            </div>
          );
        } else if (modelname == "1b") {
          return (
            <div>
              <div className="modal-header">
                <label class="e1labelheaderPage1">
                  <img
                    class="thresbtns2 imageBackgroud"
                    src="/images/threshold.png"
                  />
                  <span>{headername}</span>{" "}
                </label>
              </div>
              <div class="modal-body">
                <div class="row">
                  <div class="col-md-1"></div>
                  <div class="col-md-11 float-left">
                    <label class="thresbtnsmall">
                      <img class="thresbtns2" src="/images/engagement_idle.png" style={{ "width": "45px","height": "40px"}}/>{" "}
                      {modalContentHeading} Engagement Read Rate %
                    </label>
                  </div>
                </div>
                <div class="row">
                  <div class="col-md-1"></div>
                  <div class="col-md-9 float-left">
                    <label class="threspercentage">0%</label>
                  </div>
                  <div class="col-md-1">
                    <label class="e1labelheaderPage4 float-left" style={{ "margin-left": "15px"}}>100%</label>
                  </div>
                  <div class="col-md-1"></div>
                </div>

                <div class="row">
                  <div class="col-md-1"></div>

                  <div class="col-md-10">
                    <input
                      type="range"
                      data-toggle="tooltip"
                      data-placement="right"
                      title={engagementrange}
                      name="engagementrange"
                      min="1"
                      max="100"
                      value={engagementrange}
                      onChange={changehandler}
                      class="slider"
                      id="myRange"
                    />
                    <div style={{ "margin-left": engagementrangelabel }}>
                      {engagementForFifty}%
                    </div>
                  </div>
                  <div class="col-md-1"></div>
                </div>
              </div>
            </div>
          );
        } else if (modelname == "1c") {
          return (
            <div>
              <div className="modal-header">
                <label class="e1labelheaderPage1">
                  <img
                    class="thresbtns2 imageBackgroud"
                    src="/images/threshold.png"
                  />
                  <span>{headername}</span>{" "}
                </label>
              </div>
              <div class="modal-body">
                <div class="row">
                  <div class="col-md-1"></div>
                  <div class="col-md-11 float-left">
                    <label class="thresbtnsmall">
                      <img class="thresbtns2" src="/images/spf_idle.png" style={{ "width": "45px","height": "40px"}}/>{" "}
                      {modalContentHeading} SPF Rate %
                    </label>
                  </div>
                </div>
                <div class="row">
                  <div class="col-md-1"></div>
                  <div class="col-md-9 float-left">
                    <label class="threspercentage">90%</label>
                  </div>
                  <div class="col-md-1">
                    <label class="e1labelheaderPage4 float-left" style={{ "margin-left": "15px"}}>100%</label>
                  </div>
                  <div class="col-md-1"></div>
                </div>

                <div class="row">
                  <div class="col-md-1"></div>

                  <div class="col-md-10">
                    <input
                      type="range"
                      data-toggle="tooltip"
                      data-placement="right"
                      title={SPFrange}
                      name="SPFrange"
                      min="90"
                      max="100"
                      value={SPFrange}
                      onChange={changehandler}
                      class="slider"
                      id="myRange"
                    />
                    <div style={{ "margin-left": SPFrangelabel }}>
                      {SPFForFifty}%
                    </div>
                  </div>
                  <div class="col-md-1"></div>
                </div>
              </div>
            </div>
          );
        } else if (modelname == "1d") {
          debugger;
          return (
            <div>
              <div className="modal-header">
                <label class="e1labelheaderPage1">
                  <img
                    class="thresbtns2 imageBackgroud"
                    src="/images/threshold.png"
                  />
                  <span>{headername}</span>{" "}
                </label>
              </div>
              <div class="modal-body">
                <div class="row">
                  <div class="col-md-1"></div>
                  <div class="col-md-11 float-left">
                    <label class="thresbtnsmall">
                      <img class="thresbtns2" src="/images/dkim_idle.png" style={{ "width": "45px","height": "40px"}}/>{" "}
                      {modalContentHeading} DKIM Rate %
                    </label>
                  </div>
                </div>
                <div class="row">
                  <div class="col-md-1"></div>
                  <div class="col-md-9 float-left">
                    <label class="threspercentage">90%</label>
                  </div>
                  <div class="col-md-1">
                    <label class="e1labelheaderPage4 float-left" style={{ "margin-left": "15px"}}>100%</label>
                  </div>
                  <div class="col-md-1"></div>
                </div>

                <div class="row">
                  <div class="col-md-1"></div>

                  <div class="col-md-10">
                    <input
                      type="range"
                      data-toggle="tooltip"
                      data-placement="right"
                      title={DKIMrange}
                      name="DKIMrange"
                      min="90"
                      max="100"
                      value={DKIMrange}
                      onChange={changehandler}
                      class="slider"
                      id="myRange"
                    />
                    <div style={{ "margin-left": DKIMrangelabel }}>
                      {DKIMForFifty}%
                    </div>
                  </div>
                  <div class="col-md-1"></div>
                </div>
              </div>
            </div>
          );
        } else if (modelname == "2a") {
          debugger;
          if (formName == "1") {
            return (
              <div>
                <div className="modal-header">
                  <label class="e1labelheaderPage1">
                    <img
                      class="thresbtns2 imageBackgroudLightGray"
                      src="/images/rules.png"
                    />
                    <span>{headername}</span>{" "}
                  </label>
                </div>
                <div class="modal-body">
                  <div>
                    <div class="row ">
                      <div class="col-md-1  ">
                        <img
                          class="thresbtnsforCM"
                          src="/images/campaign_min_idle.png"
                        />
                      </div>

                      <div class="col-md-10">
                        <div>
                          <label class="e1labelheaderPage5CM campaignStyleLabel">
                            {" "}
                            Please select a{" "}
                            <strong>Campaign Vol. Minimum</strong> for all
                            "campaigns"
                            <sup>
                              <i
                                class="fa fa-info-circle"
                                style={{ "font-size": "12px" }}
                              ></i>
                            </sup>{" "}
                            in {domainName}
                          </label>
                        </div>

                        <div class="row">
                          <div class="col-md-10 campaignStyle">
                            Campaign Vol. Minimum
                          </div>
                        </div>
                        <div class="row">
                          <input
                            type="text"
                            class="rulesTextBoxStyle"
                            name="rulesMdlCampaignMinVal"
                            value={rulesMdlCampaignMinVal}
                            onChange={changehandler}
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            );
          } else {
            return (
              <div>
                <div className="modal-header">
                  <label class="e1labelheaderPage1">
                    <img
                      class="thresbtns2 imageBackgroudLightGray"
                      src="/images/rules.png"
                    />
                    <span>{headername}</span>{" "}
                  </label>
                </div>
                <div class="modal-body">
                  <div>
                    <div class="row  paddingLeft15px">
                      <div class="col-md-11 float-left">
                        <label class="e1labelheaderPage5 float-left">
                          <img
                            class="thresbtns2"
                            src="/images/intelliseed_idle.png"
                          />{" "}
                          Please set the parameters for {domainName}
                          's Intelli seed list(s)
                        </label>
                      </div>
                    </div>
                    <div class="row  paddingLeft15px">
                      <div class="col-md-3">
                        <label class="floatLeft e1labelheaderPage1 marginTop16px">
                          Name
                        </label>
                      </div>
                      <div class="col-md-4">
                        <input
                          type="text"
                          name="rulesMdlName"
                          placeholder="New Seed"
                          class="e1inputpg2 mdlControl"
                          value={rulesMdlName}
                          onChange={changehandler}
                        />
                      </div>
                    </div>
                    <div class="row  paddingLeft15px">
                      <div class="col-md-3">
                        <label class="floatLeft e1labelheaderPage1  marginTop16px">
                          Simulated Engagement
                        </label>
                      </div>
                      <div class="col-md-4">
                        <button class="engagedbutton">Engaged</button>
                        <button class="engagedbutton">Unengaged</button>
                      </div>
                    </div>
                    <div class="row  paddingLeft15px">
                      <div class="col-md-3">
                        <label class="floatLeft e1labelheaderPage1 marginTop16px">
                          Percent of List
                        </label>
                      </div>
                      <div class="col-md-4">
                        <input
                          type="text"
                          name="rulesMdlPercentList"
                          placeholder="50"
                          class="e1inputpg2  mdlControl"
                          style={{ width: "25%" }}
                          value={rulesMdlPercentList}
                          onChange={changehandler}
                        />
                        <b style={{ "font-size": "130%" }}>%</b>
                      </div>
                    </div>
                    <div class="row  paddingLeft15px">
                      <div class="col-md-3">
                        <label class="floatLeft e1labelheaderPage1 marginTop16px">
                          Filter By Region
                        </label>
                      </div>
                      <div class="col-md-4">
                        {GetCheckBoxFilterByRegion(
                          rulesMdlFilterByRegion,
                          changehandler
                        )}
                      </div>
                    </div>
                    <div class="row  paddingLeft15px">
                      <div class="col-md-3"></div>
                      <div class="col-md-4 ">
                        <div class="mdlBorder">
                          <div class="row checkboxs">
                            <div class="col-md-10">
                              <label class="e1labelModalPage1">
                                Available Regions
                              </label>
                              <hr
                                style={{ "margin-top": "0rem", width: "15rem" }}
                              />
                            </div>
                          </div>
                          <div class="checkBoxList">
                            <div class="row">
                              <div class="col-md-10">
                                <label class="e1labelModalPage2">
                                  North America-Canada
                                </label>
                              </div>
                              <div class="col-md-2">
                                {GetrulesMdlNorthAmericaCanada(
                                  rulesMdlNorthAmericaCanada,
                                  changehandler
                                )}
                              </div>
                            </div>
                            <div class="row">
                              <div class="col-md-10">
                                <label class="e1labelModalPage2">
                                  North America-US
                                </label>
                              </div>
                              <div class="col-md-2">
                                {GetrulesMdlNorthAmericaUS(
                                  rulesMdlNorthAmericaUS,
                                  changehandler
                                )}{" "}
                              </div>
                            </div>
                            <div class="row">
                              <div class="col-md-10">
                                <label class="e1labelModalPage2">
                                  Asia Pacific
                                </label>
                              </div>
                              <div class="col-md-2">
                                {GetAsiaPacific(AsiaPacific, changehandler)}
                              </div>
                            </div>
                          </div>
                        </div>
                        <div class="row">
                          <div class="col-md-12">
                            <button
                              class="btn btn-Black btn-xs float-right"
                              onClick={OpenModal}
                            >
                              Build New Intelliseed
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            );
          }
        } else if (modelname == "2b") {
          debugger;
          if (formName == "1") {
            return (
              <div>
                <div className="modal-header">
                  <label class="e1labelheaderPage1">
                    <img
                      class="thresbtns2 imageBackgroudLightGray"
                      src="/images/rules.png"
                    />
                    <span>{headername}</span>{" "}
                  </label>
                </div>
                <div class="modal-body">
                  <div col-md-1>
                    
                  <div style={{ "margin-left": "30px"}}>
                    
                    <div class="row">
                      <div class="col-md-11 float-left ">
                        <img class="thresbtnsIS float-left" src="/images/intelliseed_idle.png"/>
                        <label class="e1labelheaderPage5Rules float-left">
                          {" "}
                          Please select available seed lists to include in your
                          campaign rules
                        </label>
                      </div>
                    </div>
                    {GetRulesIndexModalSection()}
                    <div class="row paddingLeft15pxbtn">
                      <div class="col-md-11 float-left">
                        <button
                          class="btn btn-primary btn-xs marginleft2per"
                          onClick={myBtnClickHandler}
                        >
                          Build New Intelliseed
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
                </div>
              </div>
            );
          } else {
            return (
              <div>
                <div className="modal-header">
                  <label class="e1labelheaderPage1">
                    <img
                      class="thresbtns2 imageBackgroudLightGray"
                      src="/images/rules.png"
                    />
                    <span>{headername}</span>{" "}
                  </label>
                </div>
                <div class="modal-body">
                  <div>
                    <div class="row  paddingLeft15px">
                      <div class="col-md-11 float-left">
                        <label class="e1labelheaderPage5 float-left">
                          <img
                            class="thresbtns2"
                            src="/images/intelliseed_idle.png"
                          />{" "}
                          Please set the parameters for {domainName}
                          's Intelli seed list(s)
                        </label>
                      </div>
                    </div>
                    <div class="row  paddingLeft15px">
                      <div class="col-md-3">
                        <label class="floatLeft e1labelheaderPage1 marginTop16px">
                          Name
                        </label>
                      </div>
                      <div class="col-md-4">
                        <input
                          type="text"
                          name="rulesMdlName"
                          placeholder="New Seed"
                          class="e1inputpg2 mdlControl"
                          value={rulesMdlName}
                          onChange={changehandler}
                        />
                      </div>
                    </div>
                    <div class="row  paddingLeft15px">
                      <div class="col-md-3">
                        <label class="floatLeft e1labelheaderPage1  marginTop16px">
                          Simulated Engagement
                        </label>
                      </div>
                      <div class="col-md-4">
                        <button class="engagedbutton">Engaged</button>
                        <button class="engagedbutton">Unengaged</button>
                      </div>
                    </div>
                    <div class="row  paddingLeft15px">
                      <div class="col-md-3">
                        <label class="floatLeft e1labelheaderPage1 marginTop16px">
                          Percent of List
                        </label>
                      </div>
                      <div class="col-md-4">
                        <input
                          type="text"
                          name="rulesMdlPercentList"
                          placeholder="50"
                          class="e1inputpg2  mdlControl"
                          style={{ width: "25%" }}
                          value={rulesMdlPercentList}
                          onChange={changehandler}
                        />
                        <b style={{ "font-size": "130%" }}>%</b>
                      </div>
                    </div>
                    <div class="row  paddingLeft15px">
                      <div class="col-md-3">
                        <label class="floatLeft e1labelheaderPage1 marginTop16px">
                          Filter By Region
                        </label>
                      </div>
                      <div class="col-md-4">
                        {GetCheckBoxFilterByRegion(
                          rulesMdlFilterByRegion,
                          changehandler
                        )}
                      </div>
                    </div>
                    <div class="row  paddingLeft15px">
                      <div class="col-md-3"></div>
                      <div class="col-md-4 ">
                        <div class="mdlBorder">
                          <div class="row checkboxs">
                            <div class="col-md-10">
                              <label class="e1labelModalPage1">
                                Available Regions
                              </label>
                              <hr
                                style={{ "margin-top": "0rem", width: "15rem" }}
                              />
                            </div>
                          </div>
                          <div class="checkBoxList">
                            <div class="row">
                              <div class="col-md-10">
                                <label class="e1labelModalPage2">
                                  North America-Canada
                                </label>
                              </div>
                              <div class="col-md-2">
                                {GetrulesMdlNorthAmericaCanada(
                                  rulesMdlNorthAmericaCanada,
                                  changehandler
                                )}
                              </div>
                            </div>
                            <div class="row">
                              <div class="col-md-10">
                                <label class="e1labelModalPage2">
                                  North America-US
                                </label>
                              </div>
                              <div class="col-md-2">
                                {GetrulesMdlNorthAmericaUS(
                                  rulesMdlNorthAmericaUS,
                                  changehandler
                                )}{" "}
                              </div>
                            </div>
                            <div class="row">
                              <div class="col-md-10">
                                <label class="e1labelModalPage2">
                                  Asia Pacific
                                </label>
                              </div>
                              <div class="col-md-2">
                                {GetAsiaPacific(AsiaPacific, changehandler)}
                              </div>
                            </div>
                          </div>
                        </div>
                        <div class="row">
                          <div class="col-md-12">
                            <button
                              class="btn btn-Black btn-xs float-right"
                              onClick={OpenModal}
                            >
                              Build New Intelliseed
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            );
          }
        }
      }

      function GetAsiaPacific(AsiaPacific, changehandler) {
        if (AsiaPacific == true) {
          return (
            <input
              checked
              type="checkbox"
              name="AsiaPacific"
              placeholder=""
              class="e1inputpg2  mdlControl mdlCheckBox checkboxInList"
              value={AsiaPacific}
              onChange={changehandler}
            />
          );
        } else {
          return (
            <input
              type="checkbox"
              name="AsiaPacific"
              placeholder=""
              class="e1inputpg2  mdlControl mdlCheckBox checkboxInList"
              value={AsiaPacific}
              onChange={changehandler}
            />
          );
        }
      }

      function GetrulesMdlNorthAmericaUS(
        rulesMdlNorthAmericaUS,
        changehandler
      ) {
        if (rulesMdlNorthAmericaUS == true) {
          return (
            <input
              checked
              type="checkbox"
              name="rulesMdlNorthAmericaUS"
              placeholder=""
              class="e1inputpg2  mdlControl mdlCheckBox checkboxInList"
              value={rulesMdlNorthAmericaUS}
              onChange={changehandler}
            />
          );
        } else {
          return (
            <input
              type="checkbox"
              name="rulesMdlNorthAmericaUS"
              placeholder=""
              class="e1inputpg2  mdlControl mdlCheckBox checkboxInList"
              value={rulesMdlNorthAmericaUS}
              onChange={changehandler}
            />
          );
        }
      }

      function GetrulesMdlNorthAmericaCanada(
        rulesMdlNorthAmericaCanada,
        changehandler
      ) {
        if (rulesMdlNorthAmericaCanada == true) {
          return (
            <input
              checked
              type="checkbox"
              name="rulesMdlNorthAmericaCanada"
              placeholder=""
              class="e1inputpg2  mdlControl mdlCheckBox checkboxInList"
              value={rulesMdlNorthAmericaCanada}
              onChange={changehandler}
            />
          );
        } else {
          return (
            <input
              type="checkbox"
              name="rulesMdlNorthAmericaCanada"
              placeholder=""
              class="e1inputpg2  mdlControl mdlCheckBox checkboxInList"
              value={rulesMdlNorthAmericaCanada}
              onChange={changehandler}
            />
          );
        }
      }

      function GetCheckBoxFilterByRegion(
        rulesMdlFilterByRegion,
        changehandler
      ) {
        if (rulesMdlFilterByRegion == true) {
          return (
            <input
              checked
              type="checkbox"
              name="rulesMdlFilterByRegion"
              placeholder=""
              class="e1inputpg2  mdlControl mdlCheckBox"
              value={rulesMdlFilterByRegion}
              onChange={changehandler}
              style={{ width: "18px" }}
            />
          );
        } else {
          return (
            <input
              type="checkbox"
              name="rulesMdlFilterByRegion"
              placeholder=""
              class="e1inputpg2  mdlControl mdlCheckBox"
              value={rulesMdlFilterByRegion}
              onChange={changehandler}
              style={{ width: "18px" }}
            />
          );
        }
      }

      function GetRulesIndexModalSection() {
        return (
          <div class="row paddingLeft15px">
            <div class="col-md-11">
              <table class="e1inputdd marginBotton10px">
                <tr>
                <td>North America -Unengaged</td>
                </tr>
              </table>
            </div>
          </div>
        );
      }

      function AppUserInfo() {
        axios({
          method: "POST",
          url: "/appuserinfo",
        })
          .then(function (response) {
            console.log("authentication token obtained");
            dataFolderCheck();
          })
          .catch(function (error) {
            console.log(error);
          });
      }

      function dataFolderCheck() {
        axios({
          method: "POST",
          url: "/datafoldercheck",
        })
          .then(function (response) {
            console.log(response.data);
            if (response.data) {
              console.log("Folder already exists ");
              domainConfigurationDECheck();
            } else {
              console.log(
                "Need to create the Data Folder for Sparkpost Integration"
              );
              retrievingDataExtensionFolderID();
            }
          })
          .catch(function (error) {
            console.log(error);
          });
      }

      function retrievingDataExtensionFolderID() {
        axios({
          method: "POST",
          url: "/retrievingdataextensionfolderid",
        })
          .then(function (response) {
            console.log(response.data);
            if (response.data) {
              console.log("Data Extension's folder ID obtained ");
              createSparkpostIntegrationFolder();
            } else {
              console.log("Error getting Data extension's folder ID");
            }
          })
          .catch(function (error) {
            console.log(error);
          });
      }

      function createSparkpostIntegrationFolder() {
        axios({
          method: "POST",
          url: "/createsparkpostintegrationfolder",
        })
          .then(function (response) {
            console.log(response.data);
            if (response.data) {
              console.log(
                "Sparkpost Data Extension Folder has been created Successfully"
              );
              domainConfigurationDECheck();
            } else {
              console.log("Error creating data extension folder");
            }
          })
          .catch(function (error) {
            console.log(error);
          });
      }

      function domainConfigurationDECheck() {
        axios({
          method: "POST",
          url: "/domainconfigurationdecheck",
        })
          .then(function (response) {
            console.log(response.data);
            if (response.data) {
              console.log(
                "Domain Configuration Data Extension has been created Successfully"
              );
              intelliseedListsDECheck();
            } else {
              console.log("Error creating data extension folder");
            }
          })
          .catch(function (error) {
            console.log(error);
          });
      }

      function intelliseedListsDECheck() {
        axios({
          method: "POST",
          url: "/intelliseedlistsdecheck",
        })
          .then(function (response) {
            console.log(response.data);
            if (response.data) {
              //intelliseedListsDECheck();
            } else {
              console.log("Error creating the Intelliseed Data Extension");
            }
          })
          .catch(function (error) {
            console.log(error);
          });
      }

      function loadDataForDomainConfiguration(domainConfigurationData) {
        axios({
          method: "POST",
          url: "/insertrowfordc",
          data: domainConfigurationData,
          headers: { "Content-Type": "application/json" },
        })
          .then(function (response) {
            console.log("Data has been inserted in Domain Configuration");
          })
          .catch(function (error) {
            console.log(error);
          });
      }

      function loadDataForIntelliseedLists(intelliseedListsData) {
        axios({
          method: "POST",
          url: "/insertrowforisl",
          data: intelliseedListsData,
          headers: { "Content-Type": "application/json" },
        })
          .then(function (response) {
            console.log("Data has been inserted in Intelliseed Lists");
          })
          .catch(function (error) {
            console.log(error);
          });
      }

      function ApplyToggleStyle(
        blnstatus,
        emtname,
        changehandler,
        classname,
        domainValue
      ) {
        debugger;
        console.log("domainValue++" + domainValue);
        var className = "";

        if (domainValue == "") {
          if (blnstatus == true) {
            return (
              <div
                class="divHead disableToggle"
                value={blnstatus}
                name={emtname}
              >
                <div class="divOne">
                  <span class={classname} value={blnstatus}>
                    AND
                  </span>
                </div>
                <div class="divTwo">
                  <span class={classname} value={blnstatus}>
                    OR
                  </span>
                </div>
              </div>
            );
          } else if (blnstatus == false) {
            return (
              <div class="divHeadInactive disableToggle" name={emtname}>
                <div class="divOneInactive">
                  <span class={classname} value={blnstatus}>
                    AND
                  </span>
                </div>
                <div class="divTwoInactive">
                  <span class={classname} value={blnstatus}>
                    OR
                  </span>
                </div>
              </div>
            );
          }
        } else {
          if (blnstatus == true) {
            return (
              <div class="divHead" value={blnstatus} name={emtname} onClick={changehandler}>
                <div class="divOne">
                  <span class={classname} onClick={changehandler} value={blnstatus}>
                    AND
                  </span>
                </div>
                <div class="divTwo">
                  <span class={classname} onClick={changehandler} value={blnstatus}>
                    OR
                  </span>
                </div>
              </div>
            );
          } else if (blnstatus == false) {
            return (
              <div
                class="divHeadInactive"
                name={emtname}
                onClick={changehandler}
              >
                <div class="divOneInactive">
                  <span
                    class={classname}
                    onClick={changehandler}
                    value={blnstatus}
                  >
                    AND
                  </span>
                </div>
                <div class="divTwoInactive">
                  <span
                    class={classname}
                    onClick={changehandler}
                    value={blnstatus}
                  >
                    OR
                  </span>
                </div>
              </div>
            );
          }
        }
      }

      class HearsayPage1 extends React.Component {
        constructor(props) {
          super(props);
          debugger;
          this.state = {
            groupname: "SalesforceIntegration",
            namex: "",
            useridx: "",
            Page1ValidationStatus: 0,

            btn1data: "",
            btn2data: "",
            btn3data: "",
            btn4data: "",
            btn5data: "",
            btn6data: "",
            page: 1,
            apidata: null,
            loadPage2: true,
            data: null,
            modalVisible: false,
            modalClicked: false,
            modalVisible2: false,
            modalheader: "",
            inboxrange: 50,
            inboxrangelabel: 1,
            engagementrange: 1,
            engagementrangelabel: 1,
            SPFrange: 90,
            SPFrangelabel: 1,
            DKIMrange: 90,
            DKIMrangelabel: 1,
            modalName: "1",
            domain: "",
            domaindeliverability: null,
            classNameIndex: "outderDiv",
            classNameEngagementReadRate: "outderDiv",
            classNameSpf: "outderDiv",
            classNameDkim: "outderDiv",
            classNameMinValume: "outderDiv",
            classNameCampaignMin: "outderDiv",

            indextoggle: false,
            engagementtoggle: false,
            spftoggle: false,
            rulestoggle: false,
            imageIndex: "/images/inbox_idle.png",
            imageEngagementReadRate: "/images/engagement_idle.png",
            ImageSpf: "/images/spf_idle.png",
            imageDkim: "/images/dkim_idle.png",
            imageMinValume: "/images/campaign_min_idle.png",
            imageCampaignMin: "/images/intelliseed_idle.png",
            rulesMdlName: "",
            rulesMdlSimulatedEng: "0",
            rulesMdlPercentList: "",
            rulesMdlCampaignMinVal: "",
            rulesMdlFilterByRegion: false,

            rulesMdlNorthAmericaCanada: false,
            rulesMdlNorthAmericaUS: false,
            rulesMdlAsiaPacific: false,

            rulesMdlForm: "1",
          };

          this.handleChangeBack = this.handleChangeBack.bind(this);
          this.handleChangeNext = this.handleChangeNext.bind(this);
          this.handleChangeCancel = this.handleChangeCancel.bind(this);
          this.handleVerifyMyAccount = this.handleVerifyMyAccount.bind(this);
          this.handleThresholdRulesButtons = this.handleThresholdRulesButtons.bind(
            this
          );
          this.openModal = this.openModal.bind(this);

          this.redirectFromWizardSteps = this.redirectFromWizardSteps.bind(
            this
          );
          //this.onChangeValue = this.onChangeValue.bind(this);
        }

        openModal() {
          debugger;

          let intelliseedListsData = [
            {
              keys: {
                "Domain Name": this.state.domain,
              },
              values: {
                "Domain ID": this.state.domain,
                "Intelliseed List Name": "North America -Unengaged",
                Size: this.state.rulesMdlPercentList,
              },
            },
          ];
          this.setState({ modalClicked: false });
          const modalVisible = !this.state.modalVisible;

          var Dtaa = modalVisible;
          debugger;
          this.setState({ modalVisible: modalVisible });

          if (modalVisible == false) {
            this.setState({ rulesMdlForm: "1" });
            console.log("2nd Build New Intelliseed clicked");
            loadDataForIntelliseedLists(intelliseedListsData);
          }

          // this.setState({modalVisible2:modalVisible});

          var x = document.getElementsByClassName("modal-backdrop fade show");
          if (!modalVisible) {
            var i;
            for (i = 0; i < x.length; i++) {
              x[i].className = "ab";
            }
          }
        }

        componentDidMount() {
          axios({
            method: "POST",
            url: "/appdemoauthtoken",
          })
            .then(function (response) {
              console.log("authentication token obtained");
              AppUserInfo();
            })
            .catch(function (error) {
              console.log(error);
            });
        }

        handleChangeCancel(event) {
          alert("Cancel button clicked");
        }

        handleVerifyMyAccount(event) {
          debugger;
          axios({
            method: "POST",
            url: "/sparkpostverify",

            //headers: {'Content-Type': 'application/json' }
          }).then(function (response) {
            console.log("log++" + JSON.stringify(response));
          });

          let Name = this.state.namex;
          let GroupName = this.state.groupname;
          let PageValdationStatus = this.state.Page1ValidationStatus;

          if (
            Name != "" &&
            Name != " " &&
            Name != null &&
            GroupName != "" &&
            GroupName != " " &&
            GroupName != null
          ) {
            this.setState({ Page1ValidationStatus: 1 });
          } else {
            this.setState({ Page1ValidationStatus: 2 });
          }
          alert("Verify My Account button clicked");
        }

        handleThresholdRulesButtons = (param) => (event) => {
          // param is the argument you passed to the function
          // e is the event object that returned
          debugger;
          this.setState({ modalVisible: true });
          this.setState({ modalClicked: true });
          if (param == "btn1data") {
            this.setState({ [param]: "Input > X" });
            this.setState({
              modalheader:
                " Thresholds - Inbox Configuration : " + this.state.domain,
            });
            this.setState({ modalName: "1" });
            //this.openModal();
          } else if (param == "btn2data") {
            this.setState({
              modalheader:
                " Thresholds - Engagement Read Rate : " + this.state.domain,
            });
            this.setState({ [param]: "Spam > X" });
            this.setState({ modalName: "1b" });
            //this.openModal();
          } else if (param == "btn3data") {
            this.setState({
              modalheader: " Thresholds - SPF : " + this.state.domain,
            });
            this.setState({ [param]: "SPF Results" });
            this.setState({ modalName: "1c" });
            //this.openModal();
          } else if (param == "btn4data") {
            this.setState({
              modalheader: " Thresholds - DKIM : " + this.state.domain,
            });
            this.setState({ [param]: "DKIM Results" });
            this.setState({ modalName: "1d" });
            //this.openModal();
          } else if (param == "btn5data") {
            this.setState({ modalheader: " Rules - Campaign Minimum" });
            this.setState({ [param]: "Campaign Minimum" });
            this.setState({ modalName: "2a" });
            //this.openModal();
          } else if (param == "btn6data") {
            this.setState({ modalheader: " Rules - Intelliseed" });
            this.setState({ [param]: "Intelliseed" });
            this.setState({ modalName: "2b" });
            //this.openModal();
          }
        };

        handleChangeBack(event) {
          debugger;
          let ipage = this.state.page - 1;
          if (ipage <= 0) {
            ipage = 1;
          }
          this.setState({ page: ipage });
        }

        handleChangeNext(event) {
          debugger;
          if (this.state.page == 3) {
            this.setState({ rulesMdlName: "" });
            this.setState({ rulesMdlSimulatedEng: "0" });
            this.setState({ rulesMdlPercentList: "" });
            this.setState({ rulesMdlCampaignMinVal: "" });
            this.setState({ rulesMdlFilterByRegion: false });
            this.setState({ rulesMdlNorthAmericaCanada: false });
            this.setState({ rulesMdlNorthAmericaUS: false });
            this.setState({ rulesMdlAsiaPacific: false });
          }

          var ValidationStatus = true;
          var validateMessages = [];

          if (this.state.page == 1) {
            if (
              this.state.groupname == "" ||
              this.state.groupname == null ||
              this.state.groupname == " "
            ) {
              ValidationStatus = false;
              ReactDOM.render(
                <p style={{ color: "red" }}>Group Name is mandatory.</p>,
                document.getElementById("valMsggroupname")
              );
            } else {
              ReactDOM.render(
                <p> </p>,
                document.getElementById("valMsggroupname")
              );
            }

            if (this.state.namex == "" || this.state.namex == " ") {
              ValidationStatus = false;
              ReactDOM.render(
                <p style={{ color: "red" }}>Name is mandatory.</p>,
                document.getElementById("valMsgnamex")
              );
            } else {
              ReactDOM.render(<p></p>, document.getElementById("valMsgnamex"));
            }
            if (ValidationStatus == true) {
              const thisdata = this;
              axios({
                method: "GET",
                url: "/getavailabledomains",
              })
                .then(function (response) {
                  console.log("log++" + response);
                  console.log("JSON++" + JSON.stringify(response));

                  thisdata.setState({
                    data: response.data,
                  });

                  thisdata.setState({
                    loadPage2: true,
                  });
                })
                .catch(function (error) {
                  console.log("error++" + error);
                });
            }
          }

          if (this.state.page == 2) {
            let thisdata = this;
            let thresholdRecipe;
            let rulesRecipe;

            //both are AND
            if (thisdata.state.indextoggle && thisdata.state.spftoggle) {
              thresholdRecipe = "(Ir+Er)+(spf+dkim)";
            }

            //both are OR
            else if (!thisdata.state.indextoggle && !thisdata.state.spftoggle) {
              thresholdRecipe = "(Ir(or)Er)+(sp(or)dkim)";
            }

            //inbox AND and SPF OR
            else if (thisdata.state.indextoggle && !thisdata.state.spftoggle) {
              thresholdRecipe = "(Ir+Er)+(sp(or)dkim)";
            }

            //inbox OR and SPF AND
            else if (!thisdata.state.indextoggle && thisdata.state.spftoggle) {
              thresholdRecipe = "(Ir(or)Er)+(sp+dkim)";
            } else {
            }

            if (thisdata.state.rulestoggle) {
              rulesRecipe = "Cm+Is";
            } else {
              rulesRecipe = "Cm(or)Is";
            }

            let domainConfigurationData = [
              {
                keys: {
                  "Domain Name": thisdata.state.domain,
                },
                values: {
                  "Domain ID": thisdata.state.domain,
                  "Inbox Threshold": Math.round(
                    parseInt(thisdata.state.inboxrange)
                  ),
                  "Engagement Threshold": Math.round(
                    parseInt(thisdata.state.engagementrange)
                  ),
                  "SPF Threshold": Math.round(
                    parseInt(thisdata.state.SPFrange)
                  ),
                  "DKIM Threshold": Math.round(
                    parseInt(thisdata.state.DKIMrange)
                  ),
                  "Campaign Min": thisdata.state.rulesMdlCampaignMinVal,
                  "Intelliseed Lists": "North America -Unengaged",
                  "Threshold Recipe": thresholdRecipe,
                  "Rules Recipe": rulesRecipe,
                },
              },
            ];

            loadDataForDomainConfiguration(domainConfigurationData);
          }

          if (ValidationStatus == true) {
            let ipage = this.state.page + 1;
            if (ipage == 4) {
              //reset to first page
              ipage = 1;
              //reset all values
              this.setState({ groupname: "" });
              this.setState({ namex: "" });

              this.setState({ btn1data: "" });
              this.setState({ btn2data: "" });
              this.setState({ btn3data: "" });
              this.setState({ btn4data: "" });
              this.setState({ btn5data: "" });
              this.setState({ btn6data: "" });
            }
            this.setState({ page: ipage });
          }
        }

        myBtnClickHandler = () => {
          //alert("My Buttton Click Method Working");

          var FormName = this.state.rulesMdlForm;
          console.log("Intelliseed Data extension row creation");
          if (FormName == "1") {
            this.setState({ rulesMdlForm: "2" });
            console.log("Intelliseed Data extension row creation");
          } else {
            this.setState({ rulesMdlForm: "1" });
            console.log("Intelliseed Data extension row creation");
          }
        };

        myChangeHandler = (event) => {
          debugger;
          let nam = event.target.name;
          let val = event.target.value;
          let clsname = event.target.className;
          this.setState({ [nam]: val });
          //debugger;
          if (clsname == "spanindex") {
            var iToggleStatus = this.state.indextoggle;
            if (iToggleStatus == true) {
              this.setState({ indextoggle: false });
            } else {
              this.setState({ indextoggle: true });
            }
          }

          if (clsname == "spanspf") {
            var iToggleStatus = this.state.spftoggle;
            if (iToggleStatus == true) {
              this.setState({ spftoggle: false });
            } else {
              this.setState({ spftoggle: true });
            }
          }

          if (clsname == "spanrules") {
            var iToggleStatus = this.state.rulestoggle;
            if (iToggleStatus == true) {
              this.setState({ rulestoggle: false });
            } else {
              this.setState({ rulestoggle: true });
            }
          }

          if (nam == "groupname") {
            ReactDOM.render(
              <p></p>,
              document.getElementById("valMsggroupname")
            );
          }
          if (nam == "namex") {
            ReactDOM.render(<p></p>, document.getElementById("valMsgnamex"));
          }

          if (nam == "namex") {
            if (val != "" && val != " " && val != null) {
              this.setState({ namex: val });
            }
          }
          if (nam == "groupname") {
            if (val != "" && val != " " && val != null) {
              this.setState({ groupname: val });
            }
          }

          if (nam == "inboxrange") {
            if (val != "" && val != " " && val != null) {
              this.setState({ inboxrange: val }); // Inbox Range Value
              var marginLeft = val != 1 ? (val - 50) * 2 + "%" : 1 + "%";
              this.setState({ inboxrangelabel: marginLeft }); //Inbox Range Label

              //Inputs
              this.setState({ btn1data: val });
            }
          }

          if (nam == "engagementrange") {
            if (val != "" && val != " " && val != null) {
              this.setState({ engagementrange: val });
              var marginLeft = val + "%";
              this.setState({ engagementrangelabel: marginLeft });

              //Inputs
              this.setState({ btn2data: val });
            }
          }

          if (nam == "SPFrange") {
            if (val != "" && val != " " && val != null) {
              this.setState({ SPFrange: val });
              var marginLeft =
                val != 100
                  ? Math.round((val % 10) * 10 - 0.5) + "%"
                  : 97.1 + "%";
              this.setState({ SPFrangelabel: marginLeft });

              //Inputs
              this.setState({ btn3data: val });
            }
          }

          if (nam == "DKIMrange") {
            if (val != "" && val != " " && val != null) {
              this.setState({ DKIMrange: val }); // Inbox Range Value
              var marginLeft =
                val != 100
                  ? Math.round((val % 10) * 10 - 0.5) + "%"
                  : 97.1 + "%";

              this.setState({ DKIMrangelabel: marginLeft }); //Inbox Range Label

              //Inputs
              this.setState({ btn4data: val });
            }
          }

          if (nam == "rulesMdlName") {
            this.setState({ rulesMdlName: val });
          }
          if (nam == "rulesMdlSimulatedEng") {
            this.setState({ rulesMdlSimulatedEng: val });
          }
          if (nam == "rulesMdlPercentList") {
            this.setState({ rulesMdlPercentList: val });
          }

          if (nam == "rulesMdlCampaignMinVal") {
            this.setState({ rulesMdlCampaignMinVal: val });
          }

          if (nam == "rulesMdlFilterByRegion") {
            var FbrStatus = this.state.rulesMdlFilterByRegion;
            var blnValue1 = FbrStatus == true ? false : true;
            this.setState({ rulesMdlFilterByRegion: blnValue1 });
          }
          if (nam == "rulesMdlNorthAmericaCanada") {
            var rNACStatus = this.state.rulesMdlNorthAmericaCanada;
            var blnValue2 = rNACStatus == true ? false : true;
            this.setState({ rulesMdlNorthAmericaCanada: blnValue2 });
          }
          if (nam == "rulesMdlNorthAmericaUS") {
            var Status = this.state.rulesMdlNorthAmericaUS;
            var blnValue3 = FbrStatus == true ? false : true;
            this.setState({ rulesMdlNorthAmericaUS: blnValue3 });
          }
          if (nam == "AsiaPacific") {
            var FbrStatus = this.state.rulesMdlAsiaPacific;
            var blnValue4 = FbrStatus == true ? false : true;
            this.setState({ rulesMdlAsiaPacific: blnValue4 });
          }
        };

        redirectFromWizardSteps(event) {
          let Clsname = event.currentTarget.classList[1];
          const CurrentPageNo = this.state.page;
          var RedirectingPageNo = 0;
          if (Clsname == "Div1") {
            RedirectingPageNo = 1;
          } else if (Clsname == "Div2") {
            RedirectingPageNo = 2;
          } else if (Clsname == "Div3") {
            RedirectingPageNo = 3;
          }

          if (RedirectingPageNo <= CurrentPageNo) {
            this.setState({ page: RedirectingPageNo });
          }
        }

        onChangeValue = (event) => {
          debugger;
          let nam = event.target.name;
          let val = event.target.value;
          this.setState({ domain: val });
          const thisdata = this;
          const params = {
            domain: val,
          };

          //Change Image Color and background
          if (nam == "domain") {
            debugger;
            if (val == "email.gap.com") {
              this.setState({ imageIndex: "/images/inbox_light.png" });
              this.setState({
                imageEngagementReadRate: "/images/engagement_idle.png",
              });
              this.setState({ ImageSpf: "/images/spf_idle.png" });
              this.setState({ imageDkim: "/images/dkim_idle.png" });
              this.setState({
                imageMinValume: "/images/campaign_min_idle.png",
              });
              this.setState({
                imageCampaignMin: "/images/intelliseed_idle.png",
              });

              //Change Class (Backgound Color)
              this.setState({ classNameIndex: "outderDiv1" });
              this.setState({ classNameEngagementReadRate: "outderDiv" });
              this.setState({ classNameSpf: "outderDiv" });
              this.setState({ classNameDkim: "outderDiv" });
              this.setState({ classNameMinValume: "outderDiv" });
              this.setState({ classNameCampaignMin: "outderDiv" });
            } else if (val == "boxbe.com") {
              this.setState({ imageIndex: "/images/inbox_idle.png" });
              this.setState({
                imageEngagementReadRate: "/images/engagement_light.png",
              });
              this.setState({ ImageSpf: "/images/spf_idle.png" });
              this.setState({ imageDkim: "/images/dkim_idle.png" });
              this.setState({
                imageMinValume: "/images/campaign_min_idle.png",
              });
              this.setState({
                imageCampaignMin: "/images/intelliseed_idle.png",
              });

              //Change Class (Backgound Color)
              this.setState({ classNameIndex: "outderDiv" });
              this.setState({ classNameEngagementReadRate: "outderDiv1" });
              this.setState({ classNameSpf: "outderDiv" });
              this.setState({ classNameDkim: "outderDiv" });
              this.setState({ classNameMinValume: "outderDiv" });
              this.setState({ classNameCampaignMin: "outderDiv" });
            } else if (val == "email.gapfactory.com") {
              this.setState({ imageIndex: "/images/inbox_idle.png" });
              this.setState({
                imageEngagementReadRate: "/images/engagement_idle.png",
              });
              this.setState({ ImageSpf: "/images/spf_light.png" });
              this.setState({ imageDkim: "/images/dkim_idle.png" });
              this.setState({
                imageMinValume: "/images/campaign_min_idle.png",
              });
              this.setState({
                imageCampaignMin: "/images/intelliseed_idle.png",
              });

              //Change Class (Backgound Color)
              this.setState({ classNameIndex: "outderDiv" });
              this.setState({ classNameEngagementReadRate: "outderDiv" });
              this.setState({ classNameSpf: "outderDiv1" });
              this.setState({ classNameDkim: "outderDiv" });
              this.setState({ classNameMinValume: "outderDiv" });
              this.setState({ classNameCampaignMin: "outderDiv" });
            } else if (val == "4") {
              this.setState({ imageIndex: "/images/inbox_idle.png" });
              this.setState({
                imageEngagementReadRate: "/images/engagement_idle.png",
              });
              this.setState({ ImageSpf: "/images/spf_idle.png" });
              this.setState({ imageDkim: "/images/dkim_light.png" });
              this.setState({
                imageMinValume: "/images/campaign_min_idle.png",
              });
              this.setState({
                imageCampaignMin: "/images/intelliseed_idle.png",
              });

              //Change Class (Backgound Color)
              this.setState({ classNameIndex: "outderDiv" });
              this.setState({ classNameEngagementReadRate: "outderDiv" });
              this.setState({ classNameSpf: "outderDiv" });
              this.setState({ classNameDkim: "outderDiv1" });
              this.setState({ classNameMinValume: "outderDiv" });
              this.setState({ classNameCampaignMin: "outderDiv" });
            } else if (val == "5") {
              this.setState({ imageIndex: "/images/inbox_idle.png" });
              this.setState({
                imageEngagementReadRate: "/images/engagement_idle.png",
              });
              this.setState({ ImageSpf: "/images/spf_idle.png" });
              this.setState({ imageDkim: "/images/dkim_idle.png" });
              this.setState({
                imageMinValume: "/images/campaign_min_idle.png",
              });
              this.setState({
                imageCampaignMin: "/images/intelliseed_idle.png",
              });

              //Change Class (Backgound Color)
              this.setState({ classNameIndex: "outderDiv" });
              this.setState({ classNameEngagementReadRate: "outderDiv" });
              this.setState({ classNameSpf: "outderDiv" });
              this.setState({ classNameDkim: "outderDiv" });
              this.setState({ classNameMinValume: "outderDiv1" });
              this.setState({ classNameCampaignMin: "outderDiv" });
            } else if (val == "6") {
              this.setState({ imageIndex: "/images/inbox_idle.png" });
              this.setState({
                imageEngagementReadRate: "/images/engagement_idle.png",
              });
              this.setState({ ImageSpf: "/images/spf_idle.png" });
              this.setState({ imageDkim: "/images/dkim_idle.png" });
              this.setState({
                imageMinValume: "/images/campaign_min_idle.png",
              });
              this.setState({
                imageCampaignMin: "/images/intelliseed_idle.png",
              });

              //Change Class (Backgound Color)
              this.setState({ classNameIndex: "outderDiv" });
              this.setState({ classNameEngagementReadRate: "outderDiv" });
              this.setState({ classNameSpf: "outderDiv" });
              this.setState({ classNameDkim: "outderDiv" });
              this.setState({ classNameMinValume: "outderDiv" });
              this.setState({ classNameCampaignMin: "outderDiv1" });
            } else if (val == "0") {
              this.setState({ imageIndex: "/images/inbox_idle.png" });
              this.setState({
                imageEngagementReadRate: "/images/engagement_idle.png",
              });
              this.setState({ ImageSpf: "/images/spf_idle.png" });
              this.setState({ imageDkim: "/images/dkim_idle.png" });
              this.setState({
                imageMinValume: "/images/campaign_min_idle.png",
              });
              this.setState({
                imageCampaignMin: "/images/intelliseed_idle.png",
              });

              //Change Class (Backgound Color)
              this.setState({ classNameIndex: "outderDiv" });
              this.setState({ classNameEngagementReadRate: "outderDiv" });
              this.setState({ classNameSpf: "outderDiv" });
              this.setState({ classNameDkim: "outderDiv" });
              this.setState({ classNameMinValume: "outderDiv" });
              this.setState({ classNameCampaignMin: "outderDiv" });
            }
          }

          //this.state.domain = val;
          axios({
            method: "GET",
            url: "/getdomaindeliverability",
            params: params,
            //headers: {'Content-Type': 'application/json' }
          }).then(function (response) {
            console.log("log++" + JSON.stringify(response));
            thisdata.setState({
              domaindeliverability: response.data,
            });
            thisdata.setState({
              inboxrange: response.data.inboxPercentage * 100 + "%",
            });
          });
          //alert('Value Changed');
        };

        render() {
          if (this.state.page == 1) {
            return (
              <div>
                {wizardNavigationNew(1, this.redirectFromWizardSteps)}
                {AddLogorow()}
                <div class="e1container">
                  <div class=" scrolls ">
                    <div class="row epaddingbottom10">
                      <div class="col-md-11 elRowPg1">
                        <label class="e1labelheaderPage1 e1margintop10">
                          Account ID
                        </label>
                        <input
                          disabled
                          name="groupname"
                          value={this.state.groupname}
                          placeholder="SalesforceIntegration"
                          class="e1inputpg1"
                          maxlength="40"
                          onChange={this.myChangeHandler}
                        />
                        <span id="valMsggroupname"></span>
                      </div>
                      <div class="col-md-1"></div>
                    </div>
                    <hr class="e1linecolor" />
                    <div class="row">
                      <div class="col-md-11 elRowPg1">
                        <label class="e1labelheaderPage1">
                          Sparkpost SSO Dashboard Access{" "}
                        </label>
                      </div>
                      <div class="col-md-1"></div>
                    </div>
                    <div class="row epaddingbottom10">
                      <div class="col-md-5 elRowPg1">
                        <label class="e1labelheaderPage1 e1margintop10">
                          User ID
                        </label>
                        <input
                          name="namex"
                          value={this.state.namex}
                          placeholder="Yourname@marketapps"
                          class="e1inputpg1"
                          maxlength="40"
                          onChange={this.myChangeHandler}
                        />
                        <span id="valMsgnamex"></span>
                      </div>
                      <div class="col-md-5 elRowPg1"></div>
                      <div class="col-md-2"></div>
                    </div>
                    <div class="row epaddingbottom10 displayType">
                      <div class="col-md-12 elRowPg1 disBlock">
                        <button
                          onClick={this.handleVerifyMyAccount}
                          class="btn btn-default btn-xs float-right e1buttonleftpadding verifybtn"
                        >
                          Verify My Account
                        </button>
                      </div>
                    </div>
                    <hr class="e1linecolor" />
                    {ValidateAndNotify(
                      this.state.namex,
                      this.state.groupname,
                      this.state.Page1ValidationStatus
                    )}{" "}
                    {/*this.state.namex, this.state.groupname, this.state.Page1ValidationStatus)*/}
                  </div>
                </div>
                {AddButtonBlock(
                  this.handleChangeCancel,
                  this.handleChangeNext,
                  "Next",
                  "btn btn-primary btn-xs float-right e1buttonleftpadding",
                  this.handleChangeBack,
                  this.state.page
                )}
              </div>
            );
          } else if (this.state.page == 2) {
            debugger;
            let styles = { display: "block" };
            if (!this.state.modalVisible || !this.state.modalClicked) {
              styles = { display: "none" };
            }
            let className = "";
            if (this.state.inboxrange != 0) {
              debugger;
              //alert(this.state.inboxrange);
              let inboxId = document.getElementById("inboxId");
              if (inboxId != undefined) {
                //inboxId.className = "outderDiv1";
              }
            }

            return (
              <div>
                {wizardNavigationNew(2, this.redirectFromWizardSteps)}
                {AddLogorow()}
                <div class="e1container wrapper">
                  <div class=" scrolls ">
                    <div class="row">
                      <div class="col-md-11 elRowPg1">
                        <label
                          class="e1labelheaderPage1 e1margintop10"
                          style={{ "margin-bottom": "0px" }}
                        >
                          Domain Level Configuration
                        </label>
                      </div>
                      <div class="col-md-1"></div>
                    </div>
                    <div class="row">
                      <div class="col-md-11 elRowPg1">
                        <label class="e1labelheaderPageTop">
                          Please select default settings by domain for all
                          domains available.
                        </label>
                      </div>
                      <div class="col-md-1"></div>
                    </div>
                    <div class="row epaddingbottom10">
                      <div class="col-md-11 epaddingbottom10 marginTop">
                        <select
                          class="elRowPg1 e1inputpg1"
                          name="domain"
                          value={this.state.domain}
                          onChange={this.onChangeValue}
                        >
                          <option value="" selected>
                            --Select--
                          </option>
                          <option value="Apply all domains">
                            Apply all domains
                          </option>

                          {this.state.data &&
                            this.state.data.map((api) => {
                              return (
                                <option value={api.domain}>{api.domain}</option>
                              );
                            })}
                        </select>
                      </div>
                      <div class="col-md-1 epaddingbottom10"></div>
                    </div>
                    <div class="row">
                      <div class="col-md-11 marginLeft30px">
                        <label class="e1labelheaderPage1Red">
                          {" "}
                          Inbox Tracker{" "}
                        </label>
                        <hr class="zeroMargin" />
                      </div>
                      <div class="col-md-1"></div>
                    </div>

                    <div class="row">
                      <div class="col-md-11 elRowPg1">
                        <label class="e1labelheaderPage1 marginTop10px">
                          <img
                            class="thresbtns2 imageBackgroud"
                            src="/images/threshold.png"
                          />{" "}
                          Thresholds{" "}
                        </label>
                      </div>
                      <div class="col-md-1"></div>
                    </div>
                    <div style={{ "padding-left": "30px" }} class="row">
                      <div class=" col-md-3">
                        <div style={{ "margin-left": "15px;" }} class="row">
                          <div class="col-md-6">
                            <div
                              class={this.state.classNameIndex}
                              id="inboxId"
                              data-toggle="modal"
                              data-target="#myModal"
                              name="btn1data"
                              data-backdrop="static"
                              data-keyboard="false"
                              onClick={this.handleThresholdRulesButtons(
                                "btn1data"
                              )}
                            >
                              <a>
                                <img
                                  class="thresbtns"
                                  src={this.state.imageIndex}
                                />
                              </a>
                              <p class="inboxRange">
                                {Math.round(parseInt(this.state.inboxrange))}
                              </p>
                            </div>
                            <div class="textAlignCenter">
                              <label class="e1labelheaderPage4">Inbox</label>
                            </div>
                          </div>
                          <div
                            style={{
                              "padding-top": "42px",
                              "padding-left": "32px",
                            }}
                            class="col-md-6"
                          >
                            {ApplyToggleStyle(
                              this.state.indextoggle,
                              "indextoggle",
                              this.myChangeHandler,
                              "spanindex",
                              this.state.domain
                            )}
                          </div>
                        </div>
                      </div>
                      <div class=" col-md-3">
                        <div class="row">
                          <div class="col-md-6">
                            <div
                              class={this.state.classNameEngagementReadRate}
                              data-toggle="modal"
                              data-target="#myModal"
                              name="btn2data"
                              data-backdrop="static"
                              data-keyboard="false"
                              onClick={this.handleThresholdRulesButtons(
                                "btn2data"
                              )}
                            >
                              <a>
                                <img
                                  class="thresbtnsSecond "
                                  src={this.state.imageEngagementReadRate}
                                />
                              </a>
                              <p class="inboxRange2">
                                {this.state.engagementrange}
                              </p>
                            </div>
                            <div class="textAlignCenter">
                              <label class="e1labelheaderPageERR">
                                Engagement Read Rate
                              </label>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div class=" col-md-3">
                        <div class="row">
                          <div class="col-md-6">
                            <div
                              class={this.state.classNameSpf}
                              data-toggle="modal"
                              data-target="#myModal"
                              name="btn3data"
                              data-backdrop="static"
                              data-keyboard="false"
                              onClick={this.handleThresholdRulesButtons(
                                "btn3data"
                              )}
                            >
                              <a>
                                <img
                                  class="thresbtnsSpf"
                                  src={this.state.ImageSpf}
                                />
                              </a>
                            </div>
                            <div class="textAlignCenter">
                              <label class="e1labelheaderPage4">SPF</label>
                            </div>
                          </div>
                          <div
                            style={{
                              "padding-top": "42px",
                              "padding-left": "32px",
                            }}
                            class="col-md-6"
                          >
                            {ApplyToggleStyle(
                              this.state.spftoggle,
                              "spftoggle",
                              this.myChangeHandler,
                              "spanspf",
                              this.state.domain
                            )}
                          </div>
                        </div>
                      </div>
                      <div class=" col-md-3">
                        <div class="row">
                          <div class="col-md-6">
                            <div
                              class={this.state.classNameDkim}
                              data-toggle="modal"
                              data-target="#myModal"
                              name="btn4data"
                              data-backdrop="static"
                              data-keyboard="false"
                              onClick={this.handleThresholdRulesButtons(
                                "btn4data"
                              )}
                            >
                              <a>
                                <img
                                  class="thresbtnsDkim"
                                  src={this.state.imageDkim}
                                />
                              </a>
                            </div>
                            <div class="textAlignCenter">
                              <label class="e1labelheaderPage4">DKIM</label>
                            </div>
                          </div>
                          <div
                            style={{
                              "padding-top": "42px",
                              "padding-left": "32px",
                            }}
                            class="col-md-6"
                          >
                            {/*ApplyToggleStyle(this.state.rulestoggle, "rulestoggle", this.myChangeHandler, "spanrules")*/}
                          </div>
                        </div>
                      </div>
                    </div>
                    {/* <hr class="e1linecolor" />*/}
                    <div class="row">
                      <div class="col-md-11 elRowPg1">
                        <label class="e1labelheaderPage1">
                          <img
                            class="thresbtns2 imageBackgroudLightGray"
                            src="/images/rules.png"
                          />{" "}
                          Rules{" "}
                        </label>
                      </div>
                      <div class="col-md-1"></div>
                    </div>

                    <div class="row" style={{ marginLeft: 15 }}>
                      <div class=" col-md-3">
                        <div class="row">
                          <div class="col-md-6">
                            <div
                              class={this.state.classNameMinValume}
                              data-toggle="modal"
                              data-target="#myModal"
                              name="btn5data"
                              data-backdrop="static"
                              data-keyboard="false"
                              onClick={this.handleThresholdRulesButtons(
                                "btn5data"
                              )}
                            >
                              <a>
                                <img
                                  class="thresbtns"
                                  src={this.state.imageMinValume}
                                />
                              </a>
                            </div>
                            <div class="textAlignCenter">
                              <label class="e1labelheaderPage4">
                                Campaign Minimum
                              </label>
                            </div>
                          </div>
                          <div
                            style={{
                              "padding-top": "42px",
                              "padding-left": "32px",
                            }}
                            class="col-md-6 paddingTop30Px"
                          >
                            {ApplyToggleStyle(
                              this.state.rulestoggle,
                              "rulestoggle",
                              this.myChangeHandler,
                              "spanrules",
                              this.state.domain
                            )}
                          </div>
                        </div>
                      </div>
                      <div class=" col-md-3">
                        <div
                          class={this.state.classNameCampaignMin}
                          data-toggle="modal"
                          data-target="#myModal"
                          name="btn6data"
                          data-backdrop="static"
                          data-keyboard="false"
                          onClick={this.handleThresholdRulesButtons("btn6data")}
                        >
                          <a>
                            <img
                              class="thresbtns"
                              src={this.state.imageCampaignMin}
                            />
                          </a>
                        </div>
                        <div class="textAlignCenter">
                          <label class="e1labelheaderPage4">Intelliseed</label>
                        </div>
                      </div>
                      <div class=" col-md-3"></div>
                      <div class=" col-md-3"></div>
                    </div>
                    <hr class="zeroMargin" />
                  </div>
                </div>
                {AddButtonBlock(
                  this.handleChangeCancel,
                  this.handleChangeNext,
                  "Next",
                  "btn btn-primary btn-xs float-right e1buttonleftpadding",
                  this.handleChangeBack,
                  this.state.page
                )}

                <div id="dummydiv" className="modal fade in"></div>

                <div
                  id="myModal"
                  className="modal fade in modalCenter"
                  role="dialog"
                  style={styles}
                >
                  <div className="modal-dialog">
                    <div className="modal-content">
                      {GetThresholdsMedalSection(
                        this.state.inboxrange,
                        this.myChangeHandler,
                        this.state.inboxrangelabel,
                        this.state.modalName,
                        this.state.modalheader,

                        this.state.rulesMdlName,
                        this.state.rulesMdlSimulatedEng,
                        this.state.rulesMdlPercentList,
                        this.state.rulesMdlCampaignMinVal,
                        this.state.rulesMdlFilterByRegion,
                        this.state.rulesMdlNorthAmericaCanada,
                        this.state.rulesMdlNorthAmericaUS,
                        this.state.rulesMdlAsiaPacific,

                        this.myBtnClickHandler,
                        this.state.rulesMdlForm,
                        this.openModal,

                        this.state.engagementrange,
                        this.state.engagementrangelabel,
                        this.state.SPFrange,
                        this.state.SPFrangelabel,
                        this.state.DKIMrange,
                        this.state.DKIMrangelabel,

                        "Please select default settings for ",
                        this.state.domain
                      )}

                      <div class="e1container3">
                        <div class="row">
                          <div class="col-md-2 pull-left">
                            <button
                              onClick={this.openModal}
                              class="btn btn-link e1cancelbuton float-left"
                            >
                              Cancel
                            </button>
                          </div>
                          <div class="col-md-7" id="mydiv"></div>
                          <div class="col-md-3">
                            <button
                              onClick={this.openModal}
                              className="btn btn-info btn-xs float-right e1buttonleftpadding epaddingright10 backgroundColor"
                            >
                              Done
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            );
          } else if (this.state.page == 3) {
            console.log(this.state.data);
            return (
              <div>
                {wizardNavigationNew(3, this.redirectFromWizardSteps)}
                {AddLogorow()}
                <div class="e1container">
                  <div class="row epaddingbottom10 e1marginleft emargintop10">
                    <div class="col-md-11">
                      <label class="e1labelheaderPage3">SETUP SUMMARY</label>
                    </div>
                    <div class="col-md-1"></div>
                  </div>
                  <div class="row e1marginleft">
                    <div class="col-md-7 ">
                      <label class="e1labelheaderPage3Acc">Account ID</label>
                    </div>
                    <div class="col-md-5">
                      <label class="e1labelheaderPage3">DOMAIN</label>
                      <select class="elRowPg2 e1inputpg1">
                        <option value={this.state.domain}>
                          {this.state.domain}
                        </option>

                        <option value={this.state.data.domain}>
                          {this.state.data.domain}
                        </option>
                      </select>
                    </div>
                  </div>
                  <br />
                  <div class="row e1marginleft">
                    <div class="col-md-7 ">
                      <label>{this.state.groupname}</label>
                    </div>
                    <div class="col-md-5">
                      <br />
                      <label class="e1labelheaderPage3">THRESHOLDS</label>
                    </div>
                  </div>

                  <div class="row e1marginleft">
                    <div class="col-md-7 ">
                      <label class="e1labelheaderPage3">SSO ACCESS</label>
                    </div>
                    <div class="col-md-5">
                      Inbox:&gt;{this.state.inboxrange}%
                    </div>
                  </div>
                  <div class="row e1marginleft">
                    <div class="col-md-7 ">
                      <label>STATUS: ACTIVE</label>
                    </div>
                    <div class="col-md-5">
                      Engagement:&gt;.{this.state.engagementrange}%
                    </div>
                  </div>
                  <div class="row e1marginleft epaddingbottom12">
                    <div class="col-md-7 ">
                      <label>USER ID: {this.state.namex}</label>
                    </div>
                    <div class="col-md-5">SPF:&gt;{this.state.SPFrange}%</div>
                  </div>

                  <div class="row e1marginleft">
                    <div class="col-md-7 ">
                      <br />
                    </div>
                    <div class="col-md-5 ">
                      <label>DKIM:&gt;{this.state.DKIMrange}%</label>
                      <br />
                      <br />
                    </div>
                  </div>
                  <div class="row e1marginleft">
                    <div class="col-md-7 ">
                      <br />
                    </div>
                    <div class="col-md-5 ">
                      <label class="e1labelheaderPage3">RULES</label>
                      <br />
                    </div>
                  </div>
                  <div class="row e1marginleft">
                    <div class="col-md-7 ">
                      <br />
                    </div>
                    <div class="col-md-5 ">
                      <label>
                        Campaign Minimum : {this.state.rulesMdlCampaignMinVal}
                      </label>
                      <br />
                      <br />
                    </div>
                  </div>
                  <div class="row e1marginleft">
                    <div class="col-md-7 ">
                      <br />
                    </div>
                    <div class="col-md-5 ">
                      <label class="e1labelheaderPage3">Intelliseed(s)</label>
                      <br />
                    </div>
                  </div>

                  <div class="row e1marginleft">
                    <div class="col-md-7 ">
                      <br />
                    </div>
                    <div class="col-md-5 ">
                      <label>Seed 1(50%)</label>
                      <br />
                    </div>
                  </div>

                  <div class="row e1marginleft">
                    <div class="col-md-7 ">
                      <br />
                    </div>
                    <div class="col-md-5 ">
                      <label>Seed 2(100%)</label>
                      <br />
                    </div>
                  </div>
                </div>
                {AddButtonBlock(
                  this.handleChangeCancel,
                  this.handleChangeNext,
                  "Done",
                  "btn btn-primary btn-xs float-right e1buttonleftpadding",
                  this.handleChangeBack,
                  this.state.page
                )}
              </div>
            );
          }
        }
      }

      ReactDOM.render(<HearsayPage1 />, document.getElementById("mydiv"));
    </script>
  </body>
</html>
